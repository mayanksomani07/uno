{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mayan\\\\Desktop\\\\uno\\\\client\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport PACK_OF_CARDS from '../utils/packOfCards';\nimport shuffleArray from '../utils/shuffleArray';\nimport io from 'socket.io-client';\nimport queryString from 'query-string';\nimport Spinner from './Spinner';\nimport useSound from 'use-sound';\nimport bgMusic from '../assets/sounds/game-bg-music.mp3';\nimport unoSound from '../assets/sounds/uno-sound.mp3';\nimport shufflingSound from '../assets/sounds/shuffling-cards-1.mp3';\nimport skipCardSound from '../assets/sounds/skip-sound.mp3';\nimport draw2CardSound from '../assets/sounds/draw2-sound.mp3';\nimport wildCardSound from '../assets/sounds/wild-sound.mp3';\nimport draw4CardSound from '../assets/sounds/draw4-sound.mp3';\nimport gameOverSound from '../assets/sounds/game-over-sound.mp3';\n\n//NUMBER CODES FOR ACTION CARDS\n//SKIP - 404\n//DRAW 2 - 252\n//WILD - 300\n//DRAW 4 WILD - 600\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet socket;\nconst ENDPOINT = 'http://localhost:5000';\n//const ENDPOINT = 'https://uno-online-multiplayer.herokuapp.com/'\n\nconst Game = props => {\n  _s();\n  const data = queryString.parse(props.location.search);\n\n  //initialize socket state\n  const [room, setRoom] = useState(data.roomCode);\n  const [roomFull, setRoomFull] = useState(false);\n  const [users, setUsers] = useState([]);\n  const [currentUser, setCurrentUser] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    const connectionOptions = {\n      \"forceNew\": true,\n      \"reconnectionAttempts\": \"Infinity\",\n      \"timeout\": 10000,\n      \"transports\": [\"websocket\"]\n    };\n    socket = io.connect(ENDPOINT, connectionOptions);\n    socket.emit('join', {\n      room: room\n    }, error => {\n      if (error) setRoomFull(true);\n    });\n\n    //cleanup on component unmount\n    return function cleanup() {\n      socket.emit('disconnect');\n      //shut down connnection instance\n      socket.off();\n    };\n  }, []);\n\n  //initialize game state\n  const [gameOver, setGameOver] = useState(true);\n  const [winner, setWinner] = useState('');\n  const [turn, setTurn] = useState('');\n  const [player1Deck, setPlayer1Deck] = useState([]);\n  const [player2Deck, setPlayer2Deck] = useState([]);\n  const [currentColor, setCurrentColor] = useState('');\n  const [currentNumber, setCurrentNumber] = useState('');\n  const [playedCardsPile, setPlayedCardsPile] = useState([]);\n  const [drawCardPile, setDrawCardPile] = useState([]);\n  const [isChatBoxHidden, setChatBoxHidden] = useState(true);\n  const [isUnoButtonPressed, setUnoButtonPressed] = useState(false);\n  const [isSoundMuted, setSoundMuted] = useState(false);\n  const [isMusicMuted, setMusicMuted] = useState(true);\n  const [playBBgMusic, {\n    pause\n  }] = useSound(bgMusic, {\n    loop: true\n  });\n  const [playUnoSound] = useSound(unoSound);\n  const [playShufflingSound] = useSound(shufflingSound);\n  const [playSkipCardSound] = useSound(skipCardSound);\n  const [playDraw2CardSound] = useSound(draw2CardSound);\n  const [playWildCardSound] = useSound(wildCardSound);\n  const [playDraw4CardSound] = useSound(draw4CardSound);\n  const [playGameOverSound] = useSound(gameOverSound);\n\n  //runs once on component mount\n  useEffect(() => {\n    //shuffle PACK_OF_CARDS array\n    const shuffledCards = shuffleArray(PACK_OF_CARDS);\n\n    //extract first 7 elements to player1Deck\n    const player1Deck = shuffledCards.splice(0, 7);\n\n    //extract first 7 elements to player2Deck\n    const player2Deck = shuffledCards.splice(0, 7);\n\n    //extract random card from shuffledCards and check if its not an action card\n    let startingCardIndex;\n    while (true) {\n      startingCardIndex = Math.floor(Math.random() * 94);\n      if (shuffledCards[startingCardIndex] === 'skipR' || shuffledCards[startingCardIndex] === '_R' || shuffledCards[startingCardIndex] === 'D2R' || shuffledCards[startingCardIndex] === 'skipG' || shuffledCards[startingCardIndex] === '_G' || shuffledCards[startingCardIndex] === 'D2G' || shuffledCards[startingCardIndex] === 'skipB' || shuffledCards[startingCardIndex] === '_B' || shuffledCards[startingCardIndex] === 'D2B' || shuffledCards[startingCardIndex] === 'skipY' || shuffledCards[startingCardIndex] === '_Y' || shuffledCards[startingCardIndex] === 'D2Y' || shuffledCards[startingCardIndex] === 'W' || shuffledCards[startingCardIndex] === 'D4W') {\n        continue;\n      } else break;\n    }\n\n    //extract the card from that startingCardIndex into the playedCardsPile\n    const playedCardsPile = shuffledCards.splice(startingCardIndex, 1);\n\n    //store all remaining cards into drawCardPile\n    const drawCardPile = shuffledCards;\n\n    //send initial state to server\n    socket.emit('initGameState', {\n      gameOver: false,\n      turn: 'Player 1',\n      player1Deck: [...player1Deck],\n      player2Deck: [...player2Deck],\n      currentColor: playedCardsPile[0].charAt(1),\n      currentNumber: playedCardsPile[0].charAt(0),\n      playedCardsPile: [...playedCardsPile],\n      drawCardPile: [...drawCardPile]\n    });\n  }, []);\n  useEffect(() => {\n    socket.on('initGameState', ({\n      gameOver,\n      turn,\n      player1Deck,\n      player2Deck,\n      currentColor,\n      currentNumber,\n      playedCardsPile,\n      drawCardPile\n    }) => {\n      setGameOver(gameOver);\n      setTurn(turn);\n      setPlayer1Deck(player1Deck);\n      setPlayer2Deck(player2Deck);\n      setCurrentColor(currentColor);\n      setCurrentNumber(currentNumber);\n      setPlayedCardsPile(playedCardsPile);\n      setDrawCardPile(drawCardPile);\n    });\n    socket.on('updateGameState', ({\n      gameOver,\n      winner,\n      turn,\n      player1Deck,\n      player2Deck,\n      currentColor,\n      currentNumber,\n      playedCardsPile,\n      drawCardPile\n    }) => {\n      gameOver && setGameOver(gameOver);\n      gameOver === true && playGameOverSound();\n      winner && setWinner(winner);\n      turn && setTurn(turn);\n      player1Deck && setPlayer1Deck(player1Deck);\n      player2Deck && setPlayer2Deck(player2Deck);\n      currentColor && setCurrentColor(currentColor);\n      currentNumber && setCurrentNumber(currentNumber);\n      playedCardsPile && setPlayedCardsPile(playedCardsPile);\n      drawCardPile && setDrawCardPile(drawCardPile);\n      setUnoButtonPressed(false);\n    });\n    socket.on(\"roomData\", ({\n      users\n    }) => {\n      setUsers(users);\n    });\n    socket.on('currentUserData', ({\n      name\n    }) => {\n      setCurrentUser(name);\n    });\n    socket.on('message', message => {\n      setMessages(messages => [...messages, message]);\n      const chatBody = document.querySelector('.chat-body');\n      chatBody.scrollTop = chatBody.scrollHeight;\n    });\n  }, []);\n\n  //some util functions\n  const checkGameOver = arr => {\n    return arr.length === 1;\n  };\n  const checkWinner = (arr, player) => {\n    return arr.length === 1 ? player : '';\n  };\n  const toggleChatBox = () => {\n    const chatBody = document.querySelector('.chat-body');\n    if (isChatBoxHidden) {\n      chatBody.style.display = 'block';\n      setChatBoxHidden(false);\n    } else {\n      chatBody.style.display = 'none';\n      setChatBoxHidden(true);\n    }\n  };\n  const sendMessage = event => {\n    event.preventDefault();\n    if (message) {\n      socket.emit('sendMessage', {\n        message: message\n      }, () => {\n        setMessage('');\n      });\n    }\n  };\n\n  //driver functions\n  const onCardPlayedHandler = played_card => {\n    //extract player who played the card\n    const cardPlayedBy = turn;\n    switch (played_card) {\n      //if card played was a number card\n      case '0R':\n      case '1R':\n      case '2R':\n      case '3R':\n      case '4R':\n      case '5R':\n      case '6R':\n      case '7R':\n      case '8R':\n      case '9R':\n      case '_R':\n      case '0G':\n      case '1G':\n      case '2G':\n      case '3G':\n      case '4G':\n      case '5G':\n      case '6G':\n      case '7G':\n      case '8G':\n      case '9G':\n      case '_G':\n      case '0B':\n      case '1B':\n      case '2B':\n      case '3B':\n      case '4B':\n      case '5B':\n      case '6B':\n      case '7B':\n      case '8B':\n      case '9B':\n      case '_B':\n      case '0Y':\n      case '1Y':\n      case '2Y':\n      case '3Y':\n      case '4Y':\n      case '5Y':\n      case '6Y':\n      case '7Y':\n      case '8Y':\n      case '9Y':\n      case '_Y':\n        {\n          //extract number and color of played card\n          const numberOfPlayedCard = played_card.charAt(0);\n          const colorOfPlayedCard = played_card.charAt(1);\n          //check for color match\n          if (currentColor === colorOfPlayedCard) {\n            console.log('colors matched!');\n            //check who played the card and return new state accordingly\n            if (cardPlayedBy === 'Player 1') {\n              //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n              //then update turn, currentColor and currentNumber\n              const removeIndex = player1Deck.indexOf(played_card);\n              //if two cards remaining check if player pressed UNO button\n              //if not pressed add 2 cards as penalty\n              if (player1Deck.length === 2 && !isUnoButtonPressed) {\n                alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');\n                //make a copy of drawCardPile array\n                const copiedDrawCardPileArray = [...drawCardPile];\n                //pull out last two elements from it\n                const drawCard1 = copiedDrawCardPileArray.pop();\n                const drawCard2 = copiedDrawCardPileArray.pop();\n                const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)];\n                updatedPlayer1Deck.push(drawCard1);\n                updatedPlayer1Deck.push(drawCard2);\n                !isSoundMuted && playShufflingSound();\n                //send new state to server\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player1Deck),\n                  winner: checkWinner(player1Deck, 'Player 1'),\n                  turn: 'Player 2',\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player1Deck: [...updatedPlayer1Deck],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: numberOfPlayedCard,\n                  drawCardPile: [...copiedDrawCardPileArray]\n                });\n              } else {\n                !isSoundMuted && playShufflingSound();\n                //send new state to server\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player1Deck),\n                  winner: checkWinner(player1Deck, 'Player 1'),\n                  turn: 'Player 2',\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: numberOfPlayedCard\n                });\n              }\n            } else {\n              //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n              //then update turn, currentColor and currentNumber\n              const removeIndex = player2Deck.indexOf(played_card);\n              //if two cards remaining check if player pressed UNO button\n              //if not pressed add 2 cards as penalty\n              if (player2Deck.length === 2 && !isUnoButtonPressed) {\n                alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');\n                //make a copy of drawCardPile array\n                const copiedDrawCardPileArray = [...drawCardPile];\n                //pull out last two elements from it\n                const drawCard1 = copiedDrawCardPileArray.pop();\n                const drawCard2 = copiedDrawCardPileArray.pop();\n                const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\n                updatedPlayer2Deck.push(drawCard1);\n                updatedPlayer2Deck.push(drawCard2);\n                !isSoundMuted && playShufflingSound();\n                //send new state to server\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player2Deck),\n                  winner: checkWinner(player2Deck, 'Player 2'),\n                  turn: 'Player 1',\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player2Deck: [...updatedPlayer2Deck],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: numberOfPlayedCard,\n                  drawCardPile: [...copiedDrawCardPileArray]\n                });\n              } else {\n                !isSoundMuted && playShufflingSound();\n                //send new state to server\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player2Deck),\n                  winner: checkWinner(player2Deck, 'Player 2'),\n                  turn: 'Player 1',\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: numberOfPlayedCard\n                });\n              }\n            }\n          }\n          //check for number match\n          else if (currentNumber === numberOfPlayedCard) {\n            console.log('numbers matched!');\n            //check who played the card and return new state accordingly\n            if (cardPlayedBy === 'Player 1') {\n              //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n              //then update turn, currentColor and currentNumber\n              const removeIndex = player1Deck.indexOf(played_card);\n              //if two cards remaining check if player pressed UNO button\n              //if not pressed add 2 cards as penalty\n              if (player1Deck.length === 2 && !isUnoButtonPressed) {\n                alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');\n                //make a copy of drawCardPile array\n                const copiedDrawCardPileArray = [...drawCardPile];\n                //pull out last two elements from it\n                const drawCard1 = copiedDrawCardPileArray.pop();\n                const drawCard2 = copiedDrawCardPileArray.pop();\n                const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)];\n                updatedPlayer1Deck.push(drawCard1);\n                updatedPlayer1Deck.push(drawCard2);\n                !isSoundMuted && playShufflingSound();\n                //send new state to server\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player1Deck),\n                  winner: checkWinner(player1Deck, 'Player 1'),\n                  turn: 'Player 2',\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player1Deck: [...updatedPlayer1Deck],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: numberOfPlayedCard,\n                  drawCardPile: [...copiedDrawCardPileArray]\n                });\n              } else {\n                !isSoundMuted && playShufflingSound();\n                //send new state to server\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player1Deck),\n                  winner: checkWinner(player1Deck, 'Player 1'),\n                  turn: 'Player 2',\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: numberOfPlayedCard\n                });\n              }\n            } else {\n              //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n              //then update turn, currentColor and currentNumber\n              const removeIndex = player2Deck.indexOf(played_card);\n              //if two cards remaining check if player pressed UNO button\n              //if not pressed add 2 cards as penalty\n              if (player2Deck.length === 2 && !isUnoButtonPressed) {\n                alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');\n                //make a copy of drawCardPile array\n                const copiedDrawCardPileArray = [...drawCardPile];\n                //pull out last two elements from it\n                const drawCard1 = copiedDrawCardPileArray.pop();\n                const drawCard2 = copiedDrawCardPileArray.pop();\n                const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\n                updatedPlayer2Deck.push(drawCard1);\n                updatedPlayer2Deck.push(drawCard2);\n                !isSoundMuted && playShufflingSound();\n                //send new state to server\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player2Deck),\n                  winner: checkWinner(player2Deck, 'Player 2'),\n                  turn: 'Player 1',\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player2Deck: [...updatedPlayer2Deck],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: numberOfPlayedCard,\n                  drawCardPile: [...copiedDrawCardPileArray]\n                });\n              } else {\n                !isSoundMuted && playShufflingSound();\n                //send new state to server\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player2Deck),\n                  winner: checkWinner(player2Deck, 'Player 2'),\n                  turn: 'Player 1',\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: numberOfPlayedCard\n                });\n              }\n            }\n          }\n          //if no color or number match, invalid move - do not update state\n          else {\n            alert('Invalid Move!');\n          }\n          break;\n        }\n      //if card played was a skip card\n      case 'skipR':\n      case 'skipG':\n      case 'skipB':\n      case 'skipY':\n        {\n          //extract color of played skip card\n          const colorOfPlayedCard = played_card.charAt(4);\n          //check for color match\n          if (currentColor === colorOfPlayedCard) {\n            console.log('colors matched!');\n            //check who played the card and return new state accordingly\n            if (cardPlayedBy === 'Player 1') {\n              //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n              //then update currentColor and currentNumber\n              const removeIndex = player1Deck.indexOf(played_card);\n              //if two cards remaining check if player pressed UNO button\n              //if not pressed add 2 cards as penalty\n              if (player1Deck.length === 2 && !isUnoButtonPressed) {\n                alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');\n                //make a copy of drawCardPile array\n                const copiedDrawCardPileArray = [...drawCardPile];\n                //pull out last two elements from it\n                const drawCard1 = copiedDrawCardPileArray.pop();\n                const drawCard2 = copiedDrawCardPileArray.pop();\n                const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)];\n                updatedPlayer1Deck.push(drawCard1);\n                updatedPlayer1Deck.push(drawCard2);\n                !isSoundMuted && playSkipCardSound();\n                //send new state to server\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player1Deck),\n                  winner: checkWinner(player1Deck, 'Player 1'),\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player1Deck: [...updatedPlayer1Deck],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: 404,\n                  drawCardPile: [...copiedDrawCardPileArray]\n                });\n              } else {\n                !isSoundMuted && playSkipCardSound();\n                //send new state to server\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player1Deck),\n                  winner: checkWinner(player1Deck, 'Player 1'),\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: 404\n                });\n              }\n            } else {\n              //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n              //then update currentColor and currentNumber\n              const removeIndex = player2Deck.indexOf(played_card);\n              //if two cards remaining check if player pressed UNO button\n              //if not pressed add 2 cards as penalty\n              if (player2Deck.length === 2 && !isUnoButtonPressed) {\n                alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');\n                //make a copy of drawCardPile array\n                const copiedDrawCardPileArray = [...drawCardPile];\n                //pull out last two elements from it\n                const drawCard1 = copiedDrawCardPileArray.pop();\n                const drawCard2 = copiedDrawCardPileArray.pop();\n                const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\n                updatedPlayer2Deck.push(drawCard1);\n                updatedPlayer2Deck.push(drawCard2);\n                !isSoundMuted && playSkipCardSound();\n                //send new state to server\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player2Deck),\n                  winner: checkWinner(player2Deck, 'Player 2'),\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player2Deck: [...updatedPlayer2Deck],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: 404,\n                  drawCardPile: [...copiedDrawCardPileArray]\n                });\n              } else {\n                !isSoundMuted && playSkipCardSound();\n                //send new state to server\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player2Deck),\n                  winner: checkWinner(player2Deck, 'Player 2'),\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: 404\n                });\n              }\n            }\n          }\n          //check for number match - if skip card played on skip card\n          else if (currentNumber === 404) {\n            console.log('Numbers matched!');\n            //check who played the card and return new state accordingly\n            if (cardPlayedBy === 'Player 1') {\n              //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n              //then update currentColor and currentNumber - turn will remain same\n              const removeIndex = player1Deck.indexOf(played_card);\n              //if two cards remaining check if player pressed UNO button\n              //if not pressed add 2 cards as penalty\n              if (player1Deck.length === 2 && !isUnoButtonPressed) {\n                alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');\n                //make a copy of drawCardPile array\n                const copiedDrawCardPileArray = [...drawCardPile];\n                //pull out last two elements from it\n                const drawCard1 = copiedDrawCardPileArray.pop();\n                const drawCard2 = copiedDrawCardPileArray.pop();\n                const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)];\n                updatedPlayer1Deck.push(drawCard1);\n                updatedPlayer1Deck.push(drawCard2);\n                !isSoundMuted && playSkipCardSound();\n                //send new state to server\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player1Deck),\n                  winner: checkWinner(player1Deck, 'Player 1'),\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player1Deck: [...updatedPlayer1Deck],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: 404,\n                  drawCardPile: [...copiedDrawCardPileArray]\n                });\n              } else {\n                !isSoundMuted && playSkipCardSound();\n                //send new state to server\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player1Deck),\n                  winner: checkWinner(player1Deck, 'Player 1'),\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: 404\n                });\n              }\n            } else {\n              //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n              //then update currentColor and currentNumber - turn will remain same\n              const removeIndex = player2Deck.indexOf(played_card);\n              //if two cards remaining check if player pressed UNO button\n              //if not pressed add 2 cards as penalty\n              if (player2Deck.length === 2 && !isUnoButtonPressed) {\n                alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');\n                //make a copy of drawCardPile array\n                const copiedDrawCardPileArray = [...drawCardPile];\n                //pull out last two elements from it\n                const drawCard1 = copiedDrawCardPileArray.pop();\n                const drawCard2 = copiedDrawCardPileArray.pop();\n                const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\n                updatedPlayer2Deck.push(drawCard1);\n                updatedPlayer2Deck.push(drawCard2);\n                !isSoundMuted && playSkipCardSound();\n                //send new state to server\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player2Deck),\n                  winner: checkWinner(player2Deck, 'Player 2'),\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player2Deck: [...updatedPlayer2Deck],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: 404,\n                  drawCardPile: [...copiedDrawCardPileArray]\n                });\n              } else {\n                !isSoundMuted && playSkipCardSound();\n                //send new state to server\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player2Deck),\n                  winner: checkWinner(player2Deck, 'Player 2'),\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: 404\n                });\n              }\n            }\n          }\n          //if no color or number match, invalid move - do not update state\n          else {\n            alert('Invalid Move!');\n          }\n          break;\n        }\n      //if card played was a draw 2 card\n      case 'D2R':\n      case 'D2G':\n      case 'D2B':\n      case 'D2Y':\n        {\n          //extract color of played skip card\n          const colorOfPlayedCard = played_card.charAt(2);\n          //check for color match\n          if (currentColor === colorOfPlayedCard) {\n            console.log('colors matched!');\n            //check who played the card and return new state accordingly\n            if (cardPlayedBy === 'Player 1') {\n              //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n              //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n              //then update currentColor and currentNumber - turn will remain same\n              const removeIndex = player1Deck.indexOf(played_card);\n              //make a copy of drawCardPile array\n              const copiedDrawCardPileArray = [...drawCardPile];\n              //pull out last two elements from it\n              const drawCard1 = copiedDrawCardPileArray.pop();\n              const drawCard2 = copiedDrawCardPileArray.pop();\n              //if two cards remaining check if player pressed UNO button\n              //if not pressed add 2 cards as penalty\n              if (player1Deck.length === 2 && !isUnoButtonPressed) {\n                alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');\n                //pull out last two elements from drawCardPile\n                const drawCard1X = copiedDrawCardPileArray.pop();\n                const drawCard2X = copiedDrawCardPileArray.pop();\n                const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)];\n                updatedPlayer1Deck.push(drawCard1X);\n                updatedPlayer1Deck.push(drawCard2X);\n                !isSoundMuted && playDraw2CardSound();\n                //send new state to server\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player1Deck),\n                  winner: checkWinner(player1Deck, 'Player 1'),\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player1Deck: [...updatedPlayer1Deck],\n                  player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: 252,\n                  drawCardPile: [...copiedDrawCardPileArray]\n                });\n              } else {\n                !isSoundMuted && playDraw2CardSound();\n                //send new state to server\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player1Deck),\n                  winner: checkWinner(player1Deck, 'Player 1'),\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                  player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: 252,\n                  drawCardPile: [...copiedDrawCardPileArray]\n                });\n              }\n            } else {\n              //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n              //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n              //then update currentColor and currentNumber - turn will remain same\n              const removeIndex = player2Deck.indexOf(played_card);\n              //make a copy of drawCardPile array\n              const copiedDrawCardPileArray = [...drawCardPile];\n              //pull out last two elements from it\n              const drawCard1 = copiedDrawCardPileArray.pop();\n              const drawCard2 = copiedDrawCardPileArray.pop();\n              //if two cards remaining check if player pressed UNO button\n              //if not pressed add 2 cards as penalty\n              if (player2Deck.length === 2 && !isUnoButtonPressed) {\n                alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');\n                //pull out last two elements from drawCardPile\n                const drawCard1X = copiedDrawCardPileArray.pop();\n                const drawCard2X = copiedDrawCardPileArray.pop();\n                const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\n                updatedPlayer2Deck.push(drawCard1X);\n                updatedPlayer2Deck.push(drawCard2X);\n                !isSoundMuted && playDraw2CardSound();\n                //send new state to server\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player2Deck),\n                  winner: checkWinner(player2Deck, 'Player 1'),\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player2Deck: [...updatedPlayer2Deck],\n                  player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: 252,\n                  drawCardPile: [...copiedDrawCardPileArray]\n                });\n              } else {\n                !isSoundMuted && playDraw2CardSound();\n                //send new state to server\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player2Deck),\n                  winner: checkWinner(player2Deck, 'Player 1'),\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                  player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: 252,\n                  drawCardPile: [...copiedDrawCardPileArray]\n                });\n              }\n            }\n          }\n          //check for number match - if draw 2 card played on draw 2 card\n          else if (currentNumber === 252) {\n            console.log('number matched!');\n            //check who played the card and return new state accordingly\n            if (cardPlayedBy === 'Player 1') {\n              //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n              //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n              //then update currentColor and currentNumber - turn will remain same\n              const removeIndex = player1Deck.indexOf(played_card);\n              //make a copy of drawCardPile array\n              const copiedDrawCardPileArray = [...drawCardPile];\n              //pull out last two elements from it\n              const drawCard1 = copiedDrawCardPileArray.pop();\n              const drawCard2 = copiedDrawCardPileArray.pop();\n              //if two cards remaining check if player pressed UNO button\n              //if not pressed add 2 cards as penalty\n              if (player1Deck.length === 2 && !isUnoButtonPressed) {\n                alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');\n                //pull out last two elements from drawCardPile\n                const drawCard1X = copiedDrawCardPileArray.pop();\n                const drawCard2X = copiedDrawCardPileArray.pop();\n                const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)];\n                updatedPlayer1Deck.push(drawCard1X);\n                updatedPlayer1Deck.push(drawCard2X);\n                !isSoundMuted && playDraw2CardSound();\n                //send new state to server\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player1Deck),\n                  winner: checkWinner(player1Deck, 'Player 1'),\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player1Deck: [...updatedPlayer1Deck],\n                  player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: 252,\n                  drawCardPile: [...copiedDrawCardPileArray]\n                });\n              } else {\n                !isSoundMuted && playDraw2CardSound();\n                //send new state to server\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player1Deck),\n                  winner: checkWinner(player1Deck, 'Player 1'),\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                  player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: 252,\n                  drawCardPile: [...copiedDrawCardPileArray]\n                });\n              }\n            } else {\n              //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n              //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n              //then update currentColor and currentNumber - turn will remain same\n              const removeIndex = player2Deck.indexOf(played_card);\n              //make a copy of drawCardPile array\n              const copiedDrawCardPileArray = [...drawCardPile];\n              //pull out last two elements from it\n              const drawCard1 = copiedDrawCardPileArray.pop();\n              const drawCard2 = copiedDrawCardPileArray.pop();\n              //if two cards remaining check if player pressed UNO button\n              //if not pressed add 2 cards as penalty\n              if (player2Deck.length === 2 && !isUnoButtonPressed) {\n                alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');\n                //pull out last two elements from drawCardPile\n                const drawCard1X = copiedDrawCardPileArray.pop();\n                const drawCard2X = copiedDrawCardPileArray.pop();\n                const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\n                updatedPlayer2Deck.push(drawCard1X);\n                updatedPlayer2Deck.push(drawCard2X);\n                !isSoundMuted && playDraw2CardSound();\n                //send new state to server\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player2Deck),\n                  winner: checkWinner(player2Deck, 'Player 1'),\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player2Deck: [...updatedPlayer2Deck],\n                  player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: 252,\n                  drawCardPile: [...copiedDrawCardPileArray]\n                });\n              } else {\n                !isSoundMuted && playDraw2CardSound();\n                //send new state to server\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player2Deck),\n                  winner: checkWinner(player2Deck, 'Player 1'),\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                  player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: 252,\n                  drawCardPile: [...copiedDrawCardPileArray]\n                });\n              }\n            }\n          }\n          //if no color or number match, invalid move - do not update state\n          else {\n            alert('Invalid Move!');\n          }\n          break;\n        }\n      //if card played was a wild card\n      case 'W':\n        {\n          //check who played the card and return new state accordingly\n          if (cardPlayedBy === 'Player 1') {\n            //ask for new color\n            const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\n            //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n            const removeIndex = player1Deck.indexOf(played_card);\n            //then update turn, currentColor and currentNumber\n            //if two cards remaining check if player pressed UNO button\n            //if not pressed add 2 cards as penalty\n            if (player1Deck.length === 2 && !isUnoButtonPressed) {\n              alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');\n              //make a copy of drawCardPile array\n              const copiedDrawCardPileArray = [...drawCardPile];\n              //pull out last two elements from it\n              const drawCard1 = copiedDrawCardPileArray.pop();\n              const drawCard2 = copiedDrawCardPileArray.pop();\n              const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)];\n              updatedPlayer1Deck.push(drawCard1);\n              updatedPlayer1Deck.push(drawCard2);\n              !isSoundMuted && playWildCardSound();\n              //send new state to server\n              socket.emit('updateGameState', {\n                gameOver: checkGameOver(player1Deck),\n                winner: checkWinner(player1Deck, 'Player 1'),\n                turn: 'Player 2',\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                player1Deck: [...updatedPlayer1Deck],\n                currentColor: newColor,\n                currentNumber: 300,\n                drawCardPile: [...copiedDrawCardPileArray]\n              });\n            } else {\n              !isSoundMuted && playWildCardSound();\n              //send new state to server\n              socket.emit('updateGameState', {\n                gameOver: checkGameOver(player1Deck),\n                winner: checkWinner(player1Deck, 'Player 1'),\n                turn: 'Player 2',\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                currentColor: newColor,\n                currentNumber: 300\n              });\n            }\n          } else {\n            //ask for new color\n            const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\n            //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n            const removeIndex = player2Deck.indexOf(played_card);\n            //then update turn, currentColor and currentNumber\n            //if two cards remaining check if player pressed UNO button\n            //if not pressed add 2 cards as penalty\n            if (player2Deck.length === 2 && !isUnoButtonPressed) {\n              alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');\n              //make a copy of drawCardPile array\n              const copiedDrawCardPileArray = [...drawCardPile];\n              //pull out last two elements from it\n              const drawCard1 = copiedDrawCardPileArray.pop();\n              const drawCard2 = copiedDrawCardPileArray.pop();\n              const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\n              updatedPlayer2Deck.push(drawCard1);\n              updatedPlayer2Deck.push(drawCard2);\n              !isSoundMuted && playWildCardSound();\n              //send new state to server\n              socket.emit('updateGameState', {\n                gameOver: checkGameOver(player2Deck),\n                winner: checkWinner(player2Deck, 'Player 2'),\n                turn: 'Player 1',\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                player2Deck: [...updatedPlayer2Deck],\n                currentColor: newColor,\n                currentNumber: 300,\n                drawCardPile: [...copiedDrawCardPileArray]\n              });\n            } else {\n              !isSoundMuted && playWildCardSound();\n              //send new state to server\n              socket.emit('updateGameState', {\n                gameOver: checkGameOver(player2Deck),\n                winner: checkWinner(player2Deck, 'Player 2'),\n                turn: 'Player 1',\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                currentColor: newColor,\n                currentNumber: 300\n              });\n            }\n          }\n          break;\n        }\n      //if card played was a draw four wild card\n      case 'D4W':\n        {\n          //check who played the card and return new state accordingly\n          if (cardPlayedBy === 'Player 1') {\n            //ask for new color\n            const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\n            //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n            const removeIndex = player1Deck.indexOf(played_card);\n            //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n            //make a copy of drawCardPile array\n            const copiedDrawCardPileArray = [...drawCardPile];\n            //pull out last four elements from it\n            const drawCard1 = copiedDrawCardPileArray.pop();\n            const drawCard2 = copiedDrawCardPileArray.pop();\n            const drawCard3 = copiedDrawCardPileArray.pop();\n            const drawCard4 = copiedDrawCardPileArray.pop();\n            //then update currentColor and currentNumber - turn will remain same\n            //if two cards remaining check if player pressed UNO button\n            //if not pressed add 2 cards as penalty\n            if (player1Deck.length === 2 && !isUnoButtonPressed) {\n              alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');\n              //pull out last two elements from drawCardPile\n              const drawCard1X = copiedDrawCardPileArray.pop();\n              const drawCard2X = copiedDrawCardPileArray.pop();\n              const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)];\n              updatedPlayer1Deck.push(drawCard1X);\n              updatedPlayer1Deck.push(drawCard2X);\n              !isSoundMuted && playDraw4CardSound();\n              //send new state to server\n              socket.emit('updateGameState', {\n                gameOver: checkGameOver(player1Deck),\n                winner: checkWinner(player1Deck, 'Player 1'),\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                player1Deck: [...updatedPlayer1Deck],\n                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\n                currentColor: newColor,\n                currentNumber: 600,\n                drawCardPile: [...copiedDrawCardPileArray]\n              });\n            } else {\n              !isSoundMuted && playDraw4CardSound();\n              //send new state to server\n              socket.emit('updateGameState', {\n                gameOver: checkGameOver(player1Deck),\n                winner: checkWinner(player1Deck, 'Player 1'),\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\n                currentColor: newColor,\n                currentNumber: 600,\n                drawCardPile: [...copiedDrawCardPileArray]\n              });\n            }\n          } else {\n            //ask for new color\n            const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\n            //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n            const removeIndex = player2Deck.indexOf(played_card);\n            //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n            //make a copy of drawCardPile array\n            const copiedDrawCardPileArray = [...drawCardPile];\n            //pull out last four elements from it\n            const drawCard1 = copiedDrawCardPileArray.pop();\n            const drawCard2 = copiedDrawCardPileArray.pop();\n            const drawCard3 = copiedDrawCardPileArray.pop();\n            const drawCard4 = copiedDrawCardPileArray.pop();\n            //then update currentColor and currentNumber - turn will remain same\n            !isSoundMuted && playDraw4CardSound();\n            //send new state to server\n            socket.emit('updateGameState', {\n              gameOver: checkGameOver(player2Deck),\n              winner: checkWinner(player2Deck, 'Player 2'),\n              playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n              player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n              player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\n              currentColor: newColor,\n              currentNumber: 600,\n              drawCardPile: [...copiedDrawCardPileArray]\n            });\n            //if two cards remaining check if player pressed UNO button\n            //if not pressed add 2 cards as penalty\n            if (player2Deck.length === 2 && !isUnoButtonPressed) {\n              alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');\n              //pull out last two elements from drawCardPile\n              const drawCard1X = copiedDrawCardPileArray.pop();\n              const drawCard2X = copiedDrawCardPileArray.pop();\n              const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\n              updatedPlayer2Deck.push(drawCard1X);\n              updatedPlayer2Deck.push(drawCard2X);\n              !isSoundMuted && playDraw4CardSound();\n              //send new state to server\n              socket.emit('updateGameState', {\n                gameOver: checkGameOver(player2Deck),\n                winner: checkWinner(player2Deck, 'Player 2'),\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                player2Deck: [...updatedPlayer2Deck],\n                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\n                currentColor: newColor,\n                currentNumber: 600,\n                drawCardPile: [...copiedDrawCardPileArray]\n              });\n            } else {\n              !isSoundMuted && playDraw4CardSound();\n              //send new state to server\n              socket.emit('updateGameState', {\n                gameOver: checkGameOver(player2Deck),\n                winner: checkWinner(player2Deck, 'Player 2'),\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\n                currentColor: newColor,\n                currentNumber: 600,\n                drawCardPile: [...copiedDrawCardPileArray]\n              });\n            }\n          }\n        }\n        break;\n    }\n  };\n  const onCardDrawnHandler = () => {\n    //extract player who drew the card\n    const cardDrawnBy = turn;\n    //check who drew the card and return new state accordingly\n    if (cardDrawnBy === 'Player 1') {\n      //remove 1 new card from drawCardPile and add it to player1's deck (immutably)\n      //make a copy of drawCardPile array\n      const copiedDrawCardPileArray = [...drawCardPile];\n      //pull out last element from it\n      const drawCard = copiedDrawCardPileArray.pop();\n      //extract number and color of drawn card\n      const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1);\n      let numberOfDrawnCard = drawCard.charAt(0);\n      if (colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        !isSoundMuted && playShufflingSound();\n        //send new state to server\n        socket.emit('updateGameState', {\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          currentColor: colorOfDrawnCard,\n          currentNumber: 404,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      } else if (colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n        //make a copy of drawCardPile array\n        const copiedDrawCardPileArray = [...drawCardPile];\n        //pull out last two elements from it\n        const drawCard1 = copiedDrawCardPileArray.pop();\n        const drawCard2 = copiedDrawCardPileArray.pop();\n        !isSoundMuted && playDraw2CardSound();\n        //send new state to server\n        socket.emit('updateGameState', {\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n          currentColor: colorOfDrawnCard,\n          currentNumber: 252,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      } else if (drawCard === 'W') {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        //ask for new color\n        const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\n        !isSoundMuted && playWildCardSound();\n        //send new state to server\n        socket.emit('updateGameState', {\n          turn: 'Player 2',\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          currentColor: newColor,\n          currentNumber: 300,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      } else if (drawCard === 'D4W') {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        //ask for new color\n        const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\n        //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n        //make a copy of drawCardPile array\n        const copiedDrawCardPileArray = [...drawCardPile];\n        //pull out last four elements from it\n        const drawCard1 = copiedDrawCardPileArray.pop();\n        const drawCard2 = copiedDrawCardPileArray.pop();\n        const drawCard3 = copiedDrawCardPileArray.pop();\n        const drawCard4 = copiedDrawCardPileArray.pop();\n        !isSoundMuted && playDraw4CardSound();\n        //send new state to server\n        socket.emit('updateGameState', {\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\n          currentColor: newColor,\n          currentNumber: 600,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      }\n      //if not action card - check if drawn card is playable\n      else if (numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor) {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        !isSoundMuted && playShufflingSound();\n        //send new state to server\n        socket.emit('updateGameState', {\n          turn: 'Player 2',\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          currentColor: colorOfDrawnCard,\n          currentNumber: numberOfDrawnCard,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      }\n      //else add the drawn card to player1's deck\n      else {\n        !isSoundMuted && playShufflingSound();\n        //send new state to server\n        socket.emit('updateGameState', {\n          turn: 'Player 2',\n          player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard, ...player1Deck.slice(player1Deck.length)],\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      }\n    } else {\n      //remove 1 new card from drawCardPile and add it to player2's deck (immutably)\n      //make a copy of drawCardPile array\n      const copiedDrawCardPileArray = [...drawCardPile];\n      //pull out last element from it\n      const drawCard = copiedDrawCardPileArray.pop();\n      //extract number and color of drawn card\n      const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1);\n      let numberOfDrawnCard = drawCard.charAt(0);\n      if (colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        !isSoundMuted && playShufflingSound();\n        //send new state to server\n        socket.emit('updateGameState', {\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          currentColor: colorOfDrawnCard,\n          currentNumber: 404,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      } else if (colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n        //make a copy of drawCardPile array\n        const copiedDrawCardPileArray = [...drawCardPile];\n        //pull out last two elements from it\n        const drawCard1 = copiedDrawCardPileArray.pop();\n        const drawCard2 = copiedDrawCardPileArray.pop();\n        !isSoundMuted && playDraw2CardSound();\n        //send new state to server\n        socket.emit('updateGameState', {\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n          currentColor: colorOfDrawnCard,\n          currentNumber: 252,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      } else if (drawCard === 'W') {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        //ask for new color\n        const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\n        !isSoundMuted && playWildCardSound();\n        //send new state to server\n        socket.emit('updateGameState', {\n          turn: 'Player 1',\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          currentColor: newColor,\n          currentNumber: 300,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      } else if (drawCard === 'D4W') {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        //ask for new color\n        const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\n        //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n        //make a copy of drawCardPile array\n        const copiedDrawCardPileArray = [...drawCardPile];\n        //pull out last four elements from it\n        const drawCard1 = copiedDrawCardPileArray.pop();\n        const drawCard2 = copiedDrawCardPileArray.pop();\n        const drawCard3 = copiedDrawCardPileArray.pop();\n        const drawCard4 = copiedDrawCardPileArray.pop();\n        !isSoundMuted && playDraw4CardSound();\n        //send new state to server\n        socket.emit('updateGameState', {\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\n          currentColor: newColor,\n          currentNumber: 600,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      }\n      //if not action card - check if drawn card is playable\n      else if (numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor) {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        !isSoundMuted && playShufflingSound();\n        //send new state to server\n        socket.emit('updateGameState', {\n          turn: 'Player 1',\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          currentColor: colorOfDrawnCard,\n          currentNumber: numberOfDrawnCard,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      }\n      //else add the drawn card to player2's deck\n      else {\n        !isSoundMuted && playShufflingSound();\n        //send new state to server\n        socket.emit('updateGameState', {\n          turn: 'Player 1',\n          player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard, ...player2Deck.slice(player2Deck.length)],\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `Game backgroundColorR backgroundColor${currentColor}`,\n    children: [!roomFull ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"topInfo\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: require('../assets/logo.png').default\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1223,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Game Code: \", room]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1224,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"game-button green\",\n            onClick: () => setSoundMuted(!isSoundMuted),\n            children: isSoundMuted ? /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-icons\",\n              children: \"volume_off\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1226,\n              columnNumber: 124\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-icons\",\n              children: \"volume_up\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1226,\n              columnNumber: 177\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1226,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"game-button green\",\n            onClick: () => {\n              if (isMusicMuted) playBBgMusic();else pause();\n              setMusicMuted(!isMusicMuted);\n            },\n            children: isMusicMuted ? /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-icons\",\n              children: \"music_off\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1233,\n              columnNumber: 44\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-icons\",\n              children: \"music_note\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1233,\n              columnNumber: 96\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1227,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1225,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1222,\n        columnNumber: 17\n      }, this), users.length === 1 && currentUser === 'Player 2' && /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"topInfoText\",\n        children: \"Player 1 has left the game.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1238,\n        columnNumber: 68\n      }, this), users.length === 1 && currentUser === 'Player 1' && /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"topInfoText\",\n        children: \"Waiting for Player 2 to join the game.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1239,\n        columnNumber: 68\n      }, this), users.length === 2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: gameOver ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: winner !== '' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"GAME OVER\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1243,\n              columnNumber: 58\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [winner, \" wins!\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1243,\n              columnNumber: 76\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1243,\n          columnNumber: 33\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [currentUser === 'Player 1' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player2Deck\",\n              style: {\n                pointerEvents: 'none'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"playerDeckText\",\n                children: \"Player 2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1248,\n                columnNumber: 29\n              }, this), player2Deck.map((item, i) => /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"Card\",\n                onClick: () => onCardPlayedHandler(item),\n                src: require(`../assets/card-back.png`).default\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1250,\n                columnNumber: 33\n              }, this)), turn === 'Player 2' && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1257,\n                columnNumber: 51\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1247,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1259,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"middleInfo\",\n              style: turn === 'Player 2' ? {\n                pointerEvents: 'none'\n              } : null,\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"game-button\",\n                disabled: turn !== 'Player 1',\n                onClick: onCardDrawnHandler,\n                children: \"DRAW CARD\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1261,\n                columnNumber: 29\n              }, this), playedCardsPile && playedCardsPile.length > 0 && /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"Card\",\n                src: require(`../assets/cards-front/${playedCardsPile[playedCardsPile.length - 1]}.png`).default\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1263,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"game-button orange\",\n                disabled: player1Deck.length !== 2,\n                onClick: () => {\n                  setUnoButtonPressed(!isUnoButtonPressed);\n                  playUnoSound();\n                },\n                children: \"UNO\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1267,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1260,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1272,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player1Deck\",\n              style: turn === 'Player 1' ? null : {\n                pointerEvents: 'none'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"playerDeckText\",\n                children: \"Player 1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1274,\n                columnNumber: 29\n              }, this), player1Deck.map((item, i) => /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"Card\",\n                onClick: () => onCardPlayedHandler(item),\n                src: require(`../assets/cards-front/${item}.png`).default\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1276,\n                columnNumber: 33\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1273,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chatBoxWrapper\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"chat-box chat-box-player1\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"chat-head\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                    children: \"Chat Box\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1288,\n                    columnNumber: 37\n                  }, this), !isChatBoxHidden ? /*#__PURE__*/_jsxDEV(\"span\", {\n                    onClick: toggleChatBox,\n                    class: \"material-icons\",\n                    children: \"keyboard_arrow_down\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1290,\n                    columnNumber: 37\n                  }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                    onClick: toggleChatBox,\n                    class: \"material-icons\",\n                    children: \"keyboard_arrow_up\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1291,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1287,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"chat-body\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"msg-insert\",\n                    children: messages.map(msg => {\n                      if (msg.user === 'Player 2') return /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"msg-receive\",\n                        children: msg.text\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1297,\n                        columnNumber: 56\n                      }, this);\n                      if (msg.user === 'Player 1') return /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"msg-send\",\n                        children: msg.text\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1299,\n                        columnNumber: 56\n                      }, this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1294,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"chat-text\",\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      placeholder: \"Type a message...\",\n                      value: message,\n                      onChange: event => setMessage(event.target.value),\n                      onKeyPress: event => event.key === 'Enter' && sendMessage(event)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1303,\n                      columnNumber: 41\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1302,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1293,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1286,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1285,\n              columnNumber: 25\n            }, this), \" \"]\n          }, void 0, true), currentUser === 'Player 2' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player1Deck\",\n              style: {\n                pointerEvents: 'none'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"playerDeckText\",\n                children: \"Player 1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1312,\n                columnNumber: 29\n              }, this), player1Deck.map((item, i) => /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"Card\",\n                onClick: () => onCardPlayedHandler(item),\n                src: require(`../assets/card-back.png`).default\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1314,\n                columnNumber: 33\n              }, this)), turn === 'Player 1' && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1321,\n                columnNumber: 51\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1311,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1323,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"middleInfo\",\n              style: turn === 'Player 1' ? {\n                pointerEvents: 'none'\n              } : null,\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"game-button\",\n                disabled: turn !== 'Player 2',\n                onClick: onCardDrawnHandler,\n                children: \"DRAW CARD\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1325,\n                columnNumber: 29\n              }, this), playedCardsPile && playedCardsPile.length > 0 && /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"Card\",\n                src: require(`../assets/cards-front/${playedCardsPile[playedCardsPile.length - 1]}.png`).default\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1327,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"game-button orange\",\n                disabled: player2Deck.length !== 2,\n                onClick: () => {\n                  setUnoButtonPressed(!isUnoButtonPressed);\n                  playUnoSound();\n                },\n                children: \"UNO\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1331,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1324,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1336,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player2Deck\",\n              style: turn === 'Player 1' ? {\n                pointerEvents: 'none'\n              } : null,\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"playerDeckText\",\n                children: \"Player 2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1338,\n                columnNumber: 29\n              }, this), player2Deck.map((item, i) => /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"Card\",\n                onClick: () => onCardPlayedHandler(item),\n                src: require(`../assets/cards-front/${item}.png`).default\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1340,\n                columnNumber: 33\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1337,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chatBoxWrapper\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"chat-box chat-box-player2\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"chat-head\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                    children: \"Chat Box\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1352,\n                    columnNumber: 37\n                  }, this), !isChatBoxHidden ? /*#__PURE__*/_jsxDEV(\"span\", {\n                    onClick: toggleChatBox,\n                    class: \"material-icons\",\n                    children: \"keyboard_arrow_down\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1354,\n                    columnNumber: 37\n                  }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                    onClick: toggleChatBox,\n                    class: \"material-icons\",\n                    children: \"keyboard_arrow_up\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1355,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1351,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"chat-body\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"msg-insert\",\n                    children: messages.map(msg => {\n                      if (msg.user === 'Player 1') return /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"msg-receive\",\n                        children: msg.text\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1361,\n                        columnNumber: 56\n                      }, this);\n                      if (msg.user === 'Player 2') return /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"msg-send\",\n                        children: msg.text\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1363,\n                        columnNumber: 56\n                      }, this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1358,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"chat-text\",\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      placeholder: \"Type a message...\",\n                      value: message,\n                      onChange: event => setMessage(event.target.value),\n                      onKeyPress: event => event.key === 'Enter' && sendMessage(event)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1367,\n                      columnNumber: 41\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1366,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1357,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1350,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1349,\n              columnNumber: 25\n            }, this), \" \"]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1244,\n          columnNumber: 21\n        }, this)\n      }, void 0, false)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Room full\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1374,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1376,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"/\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"game-button red\",\n        children: \"QUIT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1377,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1377,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1219,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"/60W0wwBIN/LlT1M2scsZwHP4t4=\", false, function () {\n  return [useSound, useSound, useSound, useSound, useSound, useSound, useSound, useSound];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useState","PACK_OF_CARDS","shuffleArray","io","queryString","Spinner","useSound","bgMusic","unoSound","shufflingSound","skipCardSound","draw2CardSound","wildCardSound","draw4CardSound","gameOverSound","jsxDEV","_jsxDEV","Fragment","_Fragment","socket","ENDPOINT","Game","props","_s","data","parse","location","search","room","setRoom","roomCode","roomFull","setRoomFull","users","setUsers","currentUser","setCurrentUser","message","setMessage","messages","setMessages","connectionOptions","connect","emit","error","cleanup","off","gameOver","setGameOver","winner","setWinner","turn","setTurn","player1Deck","setPlayer1Deck","player2Deck","setPlayer2Deck","currentColor","setCurrentColor","currentNumber","setCurrentNumber","playedCardsPile","setPlayedCardsPile","drawCardPile","setDrawCardPile","isChatBoxHidden","setChatBoxHidden","isUnoButtonPressed","setUnoButtonPressed","isSoundMuted","setSoundMuted","isMusicMuted","setMusicMuted","playBBgMusic","pause","loop","playUnoSound","playShufflingSound","playSkipCardSound","playDraw2CardSound","playWildCardSound","playDraw4CardSound","playGameOverSound","shuffledCards","splice","startingCardIndex","Math","floor","random","charAt","on","name","chatBody","document","querySelector","scrollTop","scrollHeight","checkGameOver","arr","length","checkWinner","player","toggleChatBox","style","display","sendMessage","event","preventDefault","onCardPlayedHandler","played_card","cardPlayedBy","numberOfPlayedCard","colorOfPlayedCard","console","log","removeIndex","indexOf","alert","copiedDrawCardPileArray","drawCard1","pop","drawCard2","updatedPlayer1Deck","slice","push","updatedPlayer2Deck","drawCard1X","drawCard2X","newColor","prompt","toUpperCase","drawCard3","drawCard4","onCardDrawnHandler","cardDrawnBy","drawCard","colorOfDrawnCard","numberOfDrawnCard","className","children","src","require","default","fileName","_jsxFileName","lineNumber","columnNumber","onClick","pointerEvents","map","item","i","disabled","class","msg","user","text","type","placeholder","value","onChange","target","onKeyPress","key","href","_c","$RefreshReg$"],"sources":["C:/Users/mayan/Desktop/uno/client/src/components/Game.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport PACK_OF_CARDS from '../utils/packOfCards'\nimport shuffleArray from '../utils/shuffleArray'\nimport io from 'socket.io-client'\nimport queryString from 'query-string'\nimport Spinner from './Spinner'\nimport useSound from 'use-sound'\n\nimport bgMusic from '../assets/sounds/game-bg-music.mp3'\nimport unoSound from '../assets/sounds/uno-sound.mp3'\nimport shufflingSound from '../assets/sounds/shuffling-cards-1.mp3'\nimport skipCardSound from '../assets/sounds/skip-sound.mp3'\nimport draw2CardSound from '../assets/sounds/draw2-sound.mp3'\nimport wildCardSound from '../assets/sounds/wild-sound.mp3'\nimport draw4CardSound from '../assets/sounds/draw4-sound.mp3'\nimport gameOverSound from '../assets/sounds/game-over-sound.mp3'\n\n//NUMBER CODES FOR ACTION CARDS\n//SKIP - 404\n//DRAW 2 - 252\n//WILD - 300\n//DRAW 4 WILD - 600\n\nlet socket\nconst ENDPOINT = 'http://localhost:5000'\n//const ENDPOINT = 'https://uno-online-multiplayer.herokuapp.com/'\n\nconst Game = (props) => {\n    const data = queryString.parse(props.location.search)\n\n    //initialize socket state\n    const [room, setRoom] = useState(data.roomCode)\n    const [roomFull, setRoomFull] = useState(false)\n    const [users, setUsers] = useState([])\n    const [currentUser, setCurrentUser] = useState('')\n    const [message, setMessage] = useState('')\n    const [messages, setMessages] = useState([])\n\n    useEffect(() => {\n        const connectionOptions =  {\n            \"forceNew\" : true,\n            \"reconnectionAttempts\": \"Infinity\", \n            \"timeout\" : 10000,                  \n            \"transports\" : [\"websocket\"]\n        }\n        socket = io.connect(ENDPOINT, connectionOptions)\n\n        socket.emit('join', {room: room}, (error) => {\n            if(error)\n                setRoomFull(true)\n        })\n\n        //cleanup on component unmount\n        return function cleanup() {\n            socket.emit('disconnect')\n            //shut down connnection instance\n            socket.off()\n        }\n    }, [])\n\n    //initialize game state\n    const [gameOver, setGameOver] = useState(true)\n    const [winner, setWinner] = useState('')\n    const [turn, setTurn] = useState('')\n    const [player1Deck, setPlayer1Deck] = useState([])\n    const [player2Deck, setPlayer2Deck] = useState([])\n    const [currentColor, setCurrentColor] = useState('')\n    const [currentNumber, setCurrentNumber] = useState('')\n    const [playedCardsPile, setPlayedCardsPile] = useState([])\n    const [drawCardPile, setDrawCardPile] = useState([])\n\n    const [isChatBoxHidden, setChatBoxHidden] = useState(true)\n    const [isUnoButtonPressed, setUnoButtonPressed] = useState(false)\n    const [isSoundMuted, setSoundMuted] = useState(false)\n    const [isMusicMuted, setMusicMuted] = useState(true)\n\n    const [playBBgMusic, { pause }] = useSound(bgMusic, { loop: true })\n    const [playUnoSound] = useSound(unoSound)\n    const [playShufflingSound] = useSound(shufflingSound)\n    const [playSkipCardSound] = useSound(skipCardSound)\n    const [playDraw2CardSound] = useSound(draw2CardSound)\n    const [playWildCardSound] = useSound(wildCardSound)\n    const [playDraw4CardSound] = useSound(draw4CardSound)\n    const [playGameOverSound] = useSound(gameOverSound)\n\n    //runs once on component mount\n    useEffect(() => {\n        //shuffle PACK_OF_CARDS array\n        const shuffledCards = shuffleArray(PACK_OF_CARDS)\n\n        //extract first 7 elements to player1Deck\n        const player1Deck = shuffledCards.splice(0, 7)\n\n        //extract first 7 elements to player2Deck\n        const player2Deck = shuffledCards.splice(0, 7)\n\n        //extract random card from shuffledCards and check if its not an action card\n        let startingCardIndex\n        while(true) {\n            startingCardIndex = Math.floor(Math.random() * 94)\n            if(shuffledCards[startingCardIndex]==='skipR' || shuffledCards[startingCardIndex]==='_R' || shuffledCards[startingCardIndex]==='D2R' ||\n            shuffledCards[startingCardIndex]==='skipG' || shuffledCards[startingCardIndex]==='_G' || shuffledCards[startingCardIndex]==='D2G' ||\n            shuffledCards[startingCardIndex]==='skipB' || shuffledCards[startingCardIndex]==='_B' || shuffledCards[startingCardIndex]==='D2B' ||\n            shuffledCards[startingCardIndex]==='skipY' || shuffledCards[startingCardIndex]==='_Y' || shuffledCards[startingCardIndex]==='D2Y' ||\n            shuffledCards[startingCardIndex]==='W' || shuffledCards[startingCardIndex]==='D4W') {\n                continue;\n            }\n            else\n                break;\n        }\n\n        //extract the card from that startingCardIndex into the playedCardsPile\n        const playedCardsPile = shuffledCards.splice(startingCardIndex, 1)\n\n        //store all remaining cards into drawCardPile\n        const drawCardPile = shuffledCards\n\n        //send initial state to server\n        socket.emit('initGameState', {\n            gameOver: false,\n            turn: 'Player 1',\n            player1Deck: [...player1Deck],\n            player2Deck: [...player2Deck],\n            currentColor: playedCardsPile[0].charAt(1),\n            currentNumber: playedCardsPile[0].charAt(0),\n            playedCardsPile: [...playedCardsPile],\n            drawCardPile: [...drawCardPile]\n        })\n    }, [])\n\n    useEffect(() => {\n        socket.on('initGameState', ({ gameOver, turn, player1Deck, player2Deck, currentColor, currentNumber, playedCardsPile, drawCardPile }) => {\n            setGameOver(gameOver)\n            setTurn(turn)\n            setPlayer1Deck(player1Deck)\n            setPlayer2Deck(player2Deck)\n            setCurrentColor(currentColor)\n            setCurrentNumber(currentNumber)\n            setPlayedCardsPile(playedCardsPile)\n            setDrawCardPile(drawCardPile)\n        })\n\n        socket.on('updateGameState', ({ gameOver, winner, turn, player1Deck, player2Deck, currentColor, currentNumber, playedCardsPile, drawCardPile }) => {\n            gameOver && setGameOver(gameOver)\n            gameOver===true && playGameOverSound()\n            winner && setWinner(winner)\n            turn && setTurn(turn)\n            player1Deck && setPlayer1Deck(player1Deck)\n            player2Deck && setPlayer2Deck(player2Deck)\n            currentColor && setCurrentColor(currentColor)\n            currentNumber && setCurrentNumber(currentNumber)\n            playedCardsPile && setPlayedCardsPile(playedCardsPile)\n            drawCardPile && setDrawCardPile(drawCardPile)\n            setUnoButtonPressed(false)\n        })\n\n        socket.on(\"roomData\", ({ users }) => {\n            setUsers(users)\n        })\n\n        socket.on('currentUserData', ({ name }) => {\n            setCurrentUser(name)\n        })\n\n        socket.on('message', message => {\n            setMessages(messages => [ ...messages, message ])\n\n            const chatBody = document.querySelector('.chat-body')\n            chatBody.scrollTop = chatBody.scrollHeight\n        })\n    }, [])\n\n    //some util functions\n    const checkGameOver = (arr) => {\n        return arr.length === 1\n    }\n    \n    const checkWinner = (arr, player) => {\n        return arr.length === 1 ? player : ''\n    }\n\n    const toggleChatBox = () => {\n        const chatBody = document.querySelector('.chat-body')\n        if(isChatBoxHidden) {\n            chatBody.style.display = 'block'\n            setChatBoxHidden(false)\n        }\n        else {\n            chatBody.style.display = 'none'\n            setChatBoxHidden(true)\n        }\n    }\n\n    const sendMessage= (event) => {\n        event.preventDefault()\n        if(message) {\n            socket.emit('sendMessage', { message: message }, () => {\n                setMessage('')\n            })\n        }\n    }\n\n    //driver functions\n    const onCardPlayedHandler = (played_card) => {\n        //extract player who played the card\n        const cardPlayedBy = turn\n        switch(played_card) {\n            //if card played was a number card\n            case '0R': case '1R': case '2R': case '3R': case '4R': case '5R': case '6R': case '7R': case '8R': case '9R': case '_R': case '0G': case '1G': case '2G': case '3G': case '4G': case '5G': case '6G': case '7G': case '8G': case '9G': case '_G': case '0B': case '1B': case '2B': case '3B': case '4B': case '5B': case '6B': case '7B': case '8B': case '9B': case '_B': case '0Y': case '1Y': case '2Y': case '3Y': case '4Y': case '5Y': case '6Y': case '7Y': case '8Y': case '9Y': case '_Y': {\n                //extract number and color of played card\n                const numberOfPlayedCard = played_card.charAt(0)\n                const colorOfPlayedCard = played_card.charAt(1)\n                //check for color match\n                if(currentColor === colorOfPlayedCard) {\n                    console.log('colors matched!')\n                    //check who played the card and return new state accordingly\n                    if(cardPlayedBy === 'Player 1') {\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                        //then update turn, currentColor and currentNumber\n                        const removeIndex = player1Deck.indexOf(played_card)\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile]\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop()\n                            const drawCard2 = copiedDrawCardPileArray.pop()\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\n                            updatedPlayer1Deck.push(drawCard1)\n                            updatedPlayer1Deck.push(drawCard2)\n                            !isSoundMuted && playShufflingSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                turn: 'Player 2',\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...updatedPlayer1Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playShufflingSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                turn: 'Player 2',\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard\n                            })\n                        }\n                    }\n                    else {\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                        //then update turn, currentColor and currentNumber\n                        const removeIndex = player2Deck.indexOf(played_card)\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile]\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop()\n                            const drawCard2 = copiedDrawCardPileArray.pop()\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\n                            updatedPlayer2Deck.push(drawCard1)\n                            updatedPlayer2Deck.push(drawCard2)\n                            !isSoundMuted && playShufflingSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 2'),\n                                turn: 'Player 1',\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...updatedPlayer2Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playShufflingSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 2'),\n                                turn: 'Player 1',\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard\n                            })\n                        }\n                    }\n                }\n                //check for number match\n                else if(currentNumber === numberOfPlayedCard) {\n                    console.log('numbers matched!')\n                    //check who played the card and return new state accordingly\n                    if(cardPlayedBy === 'Player 1') {\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                        //then update turn, currentColor and currentNumber\n                        const removeIndex = player1Deck.indexOf(played_card)\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile]\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop()\n                            const drawCard2 = copiedDrawCardPileArray.pop()\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\n                            updatedPlayer1Deck.push(drawCard1)\n                            updatedPlayer1Deck.push(drawCard2)\n                            !isSoundMuted && playShufflingSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                turn: 'Player 2',\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...updatedPlayer1Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playShufflingSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                turn: 'Player 2',\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard\n                            })\n                        }\n                    }\n                    else {\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                        //then update turn, currentColor and currentNumber\n                        const removeIndex = player2Deck.indexOf(played_card)\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile]\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop()\n                            const drawCard2 = copiedDrawCardPileArray.pop()\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\n                            updatedPlayer2Deck.push(drawCard1)\n                            updatedPlayer2Deck.push(drawCard2)\n                            !isSoundMuted && playShufflingSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 2'),\n                                turn: 'Player 1',\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...updatedPlayer2Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playShufflingSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 2'),\n                                turn: 'Player 1',\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard\n                            })\n                        }\n                    }\n                }\n                //if no color or number match, invalid move - do not update state\n                else {\n                    alert('Invalid Move!')\n                }\n                break;\n            }\n            //if card played was a skip card\n            case 'skipR': case 'skipG': case 'skipB': case 'skipY': {\n                //extract color of played skip card\n                const colorOfPlayedCard = played_card.charAt(4)\n                //check for color match\n                if(currentColor === colorOfPlayedCard) {\n                    console.log('colors matched!')\n                    //check who played the card and return new state accordingly\n                    if(cardPlayedBy === 'Player 1') {\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                        //then update currentColor and currentNumber\n                        const removeIndex = player1Deck.indexOf(played_card)\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile]\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop()\n                            const drawCard2 = copiedDrawCardPileArray.pop()\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\n                            updatedPlayer1Deck.push(drawCard1)\n                            updatedPlayer1Deck.push(drawCard2)\n                            !isSoundMuted && playSkipCardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...updatedPlayer1Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playSkipCardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404\n                            })\n                        }\n                    }\n                    else {\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                        //then update currentColor and currentNumber\n                        const removeIndex = player2Deck.indexOf(played_card)\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile]\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop()\n                            const drawCard2 = copiedDrawCardPileArray.pop()\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\n                            updatedPlayer2Deck.push(drawCard1)\n                            updatedPlayer2Deck.push(drawCard2)\n                            !isSoundMuted && playSkipCardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 2'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...updatedPlayer2Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playSkipCardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 2'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404\n                            })\n                        }\n                    }\n                }\n                //check for number match - if skip card played on skip card\n                else if(currentNumber === 404) {\n                    console.log('Numbers matched!')\n                    //check who played the card and return new state accordingly\n                    if(cardPlayedBy === 'Player 1') {\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                        //then update currentColor and currentNumber - turn will remain same\n                        const removeIndex = player1Deck.indexOf(played_card)\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile]\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop()\n                            const drawCard2 = copiedDrawCardPileArray.pop()\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\n                            updatedPlayer1Deck.push(drawCard1)\n                            updatedPlayer1Deck.push(drawCard2)\n                            !isSoundMuted && playSkipCardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...updatedPlayer1Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playSkipCardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404\n                            })\n                        }\n                    }\n                    else {\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                        //then update currentColor and currentNumber - turn will remain same\n                        const removeIndex = player2Deck.indexOf(played_card)\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile]\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop()\n                            const drawCard2 = copiedDrawCardPileArray.pop()\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\n                            updatedPlayer2Deck.push(drawCard1)\n                            updatedPlayer2Deck.push(drawCard2)\n                            !isSoundMuted && playSkipCardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 2'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...updatedPlayer2Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playSkipCardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 2'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404\n                            })\n                        }\n                    }\n                }\n                //if no color or number match, invalid move - do not update state\n                else {\n                    alert('Invalid Move!')\n                }\n                break;\n            }\n            //if card played was a draw 2 card\n            case 'D2R': case 'D2G': case 'D2B': case 'D2Y': {\n                //extract color of played skip card\n                const colorOfPlayedCard = played_card.charAt(2)\n                //check for color match\n                if(currentColor === colorOfPlayedCard) {\n                    console.log('colors matched!')\n                    //check who played the card and return new state accordingly\n                    if(cardPlayedBy === 'Player 1') {\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                        //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n                        //then update currentColor and currentNumber - turn will remain same\n                        const removeIndex = player1Deck.indexOf(played_card)\n                        //make a copy of drawCardPile array\n                        const copiedDrawCardPileArray = [...drawCardPile]\n                        //pull out last two elements from it\n                        const drawCard1 = copiedDrawCardPileArray.pop()\n                        const drawCard2 = copiedDrawCardPileArray.pop()\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //pull out last two elements from drawCardPile\n                            const drawCard1X = copiedDrawCardPileArray.pop()\n                            const drawCard2X = copiedDrawCardPileArray.pop()\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\n                            updatedPlayer1Deck.push(drawCard1X)\n                            updatedPlayer1Deck.push(drawCard2X)\n                            !isSoundMuted && playDraw2CardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...updatedPlayer1Deck],\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playDraw2CardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                    }\n                    else {\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                        //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n                        //then update currentColor and currentNumber - turn will remain same\n                        const removeIndex = player2Deck.indexOf(played_card)\n                        //make a copy of drawCardPile array\n                        const copiedDrawCardPileArray = [...drawCardPile]\n                        //pull out last two elements from it\n                        const drawCard1 = copiedDrawCardPileArray.pop()\n                        const drawCard2 = copiedDrawCardPileArray.pop()\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //pull out last two elements from drawCardPile\n                            const drawCard1X = copiedDrawCardPileArray.pop()\n                            const drawCard2X = copiedDrawCardPileArray.pop()\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\n                            updatedPlayer2Deck.push(drawCard1X)\n                            updatedPlayer2Deck.push(drawCard2X)\n                            !isSoundMuted && playDraw2CardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...updatedPlayer2Deck],\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playDraw2CardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                    }\n                }\n                //check for number match - if draw 2 card played on draw 2 card\n                else if(currentNumber === 252) {                        \n                    console.log('number matched!')\n                    //check who played the card and return new state accordingly\n                    if(cardPlayedBy === 'Player 1') {\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                        //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n                        //then update currentColor and currentNumber - turn will remain same\n                        const removeIndex = player1Deck.indexOf(played_card)\n                        //make a copy of drawCardPile array\n                        const copiedDrawCardPileArray = [...drawCardPile]\n                        //pull out last two elements from it\n                        const drawCard1 = copiedDrawCardPileArray.pop()\n                        const drawCard2 = copiedDrawCardPileArray.pop()\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //pull out last two elements from drawCardPile\n                            const drawCard1X = copiedDrawCardPileArray.pop()\n                            const drawCard2X = copiedDrawCardPileArray.pop()\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\n                            updatedPlayer1Deck.push(drawCard1X)\n                            updatedPlayer1Deck.push(drawCard2X)\n                            !isSoundMuted && playDraw2CardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...updatedPlayer1Deck],\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playDraw2CardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                    }\n                    else {\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                        //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n                        //then update currentColor and currentNumber - turn will remain same\n                        const removeIndex = player2Deck.indexOf(played_card)\n                        //make a copy of drawCardPile array\n                        const copiedDrawCardPileArray = [...drawCardPile]\n                        //pull out last two elements from it\n                        const drawCard1 = copiedDrawCardPileArray.pop()\n                        const drawCard2 = copiedDrawCardPileArray.pop()\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //pull out last two elements from drawCardPile\n                            const drawCard1X = copiedDrawCardPileArray.pop()\n                            const drawCard2X = copiedDrawCardPileArray.pop()\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\n                            updatedPlayer2Deck.push(drawCard1X)\n                            updatedPlayer2Deck.push(drawCard2X)\n                            !isSoundMuted && playDraw2CardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...updatedPlayer2Deck],\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playDraw2CardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                    }\n                }\n                //if no color or number match, invalid move - do not update state\n                else {\n                    alert('Invalid Move!')\n                }\n                break;\n            }\n            //if card played was a wild card\n            case 'W': {\n                //check who played the card and return new state accordingly\n                if(cardPlayedBy === 'Player 1') {\n                    //ask for new color\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\n                    //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                    const removeIndex = player1Deck.indexOf(played_card)\n                    //then update turn, currentColor and currentNumber\n                    //if two cards remaining check if player pressed UNO button\n                    //if not pressed add 2 cards as penalty\n                    if(player1Deck.length===2 && !isUnoButtonPressed) {\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                        //make a copy of drawCardPile array\n                        const copiedDrawCardPileArray = [...drawCardPile]\n                        //pull out last two elements from it\n                        const drawCard1 = copiedDrawCardPileArray.pop()\n                        const drawCard2 = copiedDrawCardPileArray.pop()\n                        const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\n                        updatedPlayer1Deck.push(drawCard1)\n                        updatedPlayer1Deck.push(drawCard2)\n                        !isSoundMuted && playWildCardSound()\n                        //send new state to server\n                        socket.emit('updateGameState', {\n                            gameOver: checkGameOver(player1Deck),\n                            winner: checkWinner(player1Deck, 'Player 1'),\n                            turn: 'Player 2',\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                            player1Deck: [...updatedPlayer1Deck],\n                            currentColor: newColor,\n                            currentNumber: 300,\n                            drawCardPile: [...copiedDrawCardPileArray]\n                        })\n                    }\n                    else {\n                        !isSoundMuted && playWildCardSound()\n                        //send new state to server\n                        socket.emit('updateGameState', {\n                            gameOver: checkGameOver(player1Deck),\n                            winner: checkWinner(player1Deck, 'Player 1'),\n                            turn: 'Player 2',\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                            player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                            currentColor: newColor,\n                            currentNumber: 300\n                        })\n                    }\n                }\n                else {\n                    //ask for new color\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\n                    //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                    const removeIndex = player2Deck.indexOf(played_card)\n                    //then update turn, currentColor and currentNumber\n                    //if two cards remaining check if player pressed UNO button\n                    //if not pressed add 2 cards as penalty\n                    if(player2Deck.length===2 && !isUnoButtonPressed) {\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                        //make a copy of drawCardPile array\n                        const copiedDrawCardPileArray = [...drawCardPile]\n                        //pull out last two elements from it\n                        const drawCard1 = copiedDrawCardPileArray.pop()\n                        const drawCard2 = copiedDrawCardPileArray.pop()\n                        const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\n                        updatedPlayer2Deck.push(drawCard1)\n                        updatedPlayer2Deck.push(drawCard2)\n                        !isSoundMuted && playWildCardSound()\n                        //send new state to server\n                        socket.emit('updateGameState', {\n                            gameOver: checkGameOver(player2Deck),\n                            winner: checkWinner(player2Deck, 'Player 2'),\n                            turn: 'Player 1',\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                            player2Deck: [...updatedPlayer2Deck],\n                            currentColor: newColor,\n                            currentNumber: 300,\n                            drawCardPile: [...copiedDrawCardPileArray]\n                        })\n                    }\n                    else {\n                        !isSoundMuted && playWildCardSound()\n                        //send new state to server\n                        socket.emit('updateGameState', {\n                            gameOver: checkGameOver(player2Deck),\n                            winner: checkWinner(player2Deck, 'Player 2'),\n                            turn: 'Player 1',\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                            player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                            currentColor: newColor,\n                            currentNumber: 300\n                        })\n                    }\n                }\n                break;\n            }\n            //if card played was a draw four wild card\n            case 'D4W': {\n                //check who played the card and return new state accordingly\n                if(cardPlayedBy === 'Player 1') {\n                    //ask for new color\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\n                    //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                    const removeIndex = player1Deck.indexOf(played_card)\n                    //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n                    //make a copy of drawCardPile array\n                    const copiedDrawCardPileArray = [...drawCardPile]\n                    //pull out last four elements from it\n                    const drawCard1 = copiedDrawCardPileArray.pop()\n                    const drawCard2 = copiedDrawCardPileArray.pop()\n                    const drawCard3 = copiedDrawCardPileArray.pop()\n                    const drawCard4 = copiedDrawCardPileArray.pop()\n                    //then update currentColor and currentNumber - turn will remain same\n                    //if two cards remaining check if player pressed UNO button\n                    //if not pressed add 2 cards as penalty\n                    if(player1Deck.length===2 && !isUnoButtonPressed) {\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                        //pull out last two elements from drawCardPile\n                        const drawCard1X = copiedDrawCardPileArray.pop()\n                        const drawCard2X = copiedDrawCardPileArray.pop()\n                        const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\n                        updatedPlayer1Deck.push(drawCard1X)\n                        updatedPlayer1Deck.push(drawCard2X)\n                        !isSoundMuted && playDraw4CardSound()\n                        //send new state to server\n                        socket.emit('updateGameState', {\n                            gameOver: checkGameOver(player1Deck),\n                            winner: checkWinner(player1Deck, 'Player 1'),\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                            player1Deck: [...updatedPlayer1Deck],\n                            player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\n                            currentColor: newColor,\n                            currentNumber: 600,\n                            drawCardPile: [...copiedDrawCardPileArray]\n                        })\n                    }\n                    else {\n                        !isSoundMuted && playDraw4CardSound()\n                        //send new state to server\n                        socket.emit('updateGameState', {\n                            gameOver: checkGameOver(player1Deck),\n                            winner: checkWinner(player1Deck, 'Player 1'),\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                            player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                            player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\n                            currentColor: newColor,\n                            currentNumber: 600,\n                            drawCardPile: [...copiedDrawCardPileArray]\n                        })\n                    }\n                }\n                else {\n                    //ask for new color\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\n                    //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                    const removeIndex = player2Deck.indexOf(played_card)\n                    //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n                    //make a copy of drawCardPile array\n                    const copiedDrawCardPileArray = [...drawCardPile]\n                    //pull out last four elements from it\n                    const drawCard1 = copiedDrawCardPileArray.pop()\n                    const drawCard2 = copiedDrawCardPileArray.pop()\n                    const drawCard3 = copiedDrawCardPileArray.pop()\n                    const drawCard4 = copiedDrawCardPileArray.pop()\n                    //then update currentColor and currentNumber - turn will remain same\n                    !isSoundMuted && playDraw4CardSound()\n                    //send new state to server\n                    socket.emit('updateGameState', {\n                        gameOver: checkGameOver(player2Deck),\n                        winner: checkWinner(player2Deck, 'Player 2'),\n                        playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                        player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                        player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\n                        currentColor: newColor,\n                        currentNumber: 600,\n                        drawCardPile: [...copiedDrawCardPileArray]\n                    })\n                    //if two cards remaining check if player pressed UNO button\n                    //if not pressed add 2 cards as penalty\n                    if(player2Deck.length===2 && !isUnoButtonPressed) {\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                        //pull out last two elements from drawCardPile\n                        const drawCard1X = copiedDrawCardPileArray.pop()\n                        const drawCard2X = copiedDrawCardPileArray.pop()\n                        const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\n                        updatedPlayer2Deck.push(drawCard1X)\n                        updatedPlayer2Deck.push(drawCard2X)\n                        !isSoundMuted && playDraw4CardSound()\n                        //send new state to server\n                        socket.emit('updateGameState', {\n                            gameOver: checkGameOver(player2Deck),\n                            winner: checkWinner(player2Deck, 'Player 2'),\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                            player2Deck: [...updatedPlayer2Deck],\n                            player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\n                            currentColor: newColor,\n                            currentNumber: 600,\n                            drawCardPile: [...copiedDrawCardPileArray]\n                        })\n                    }\n                    else {\n                        !isSoundMuted && playDraw4CardSound()\n                        //send new state to server\n                        socket.emit('updateGameState', {\n                            gameOver: checkGameOver(player2Deck),\n                            winner: checkWinner(player2Deck, 'Player 2'),\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                            player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                            player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\n                            currentColor: newColor,\n                            currentNumber: 600,\n                            drawCardPile: [...copiedDrawCardPileArray]\n                        })\n                    }\n                }\n            }\n            break;\n        }\n    }\n    \n    const onCardDrawnHandler = () => {\n        //extract player who drew the card\n        const cardDrawnBy = turn\n        //check who drew the card and return new state accordingly\n        if(cardDrawnBy === 'Player 1') {\n            //remove 1 new card from drawCardPile and add it to player1's deck (immutably)\n            //make a copy of drawCardPile array\n            const copiedDrawCardPileArray = [...drawCardPile]\n            //pull out last element from it\n            const drawCard = copiedDrawCardPileArray.pop()\n            //extract number and color of drawn card\n            const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1)\n            let numberOfDrawnCard = drawCard.charAt(0)\n            if(colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                !isSoundMuted && playShufflingSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    currentColor: colorOfDrawnCard,\n                    currentNumber: 404,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n                //make a copy of drawCardPile array\n                const copiedDrawCardPileArray = [...drawCardPile]\n                //pull out last two elements from it\n                const drawCard1 = copiedDrawCardPileArray.pop()\n                const drawCard2 = copiedDrawCardPileArray.pop()\n                !isSoundMuted && playDraw2CardSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n                    currentColor: colorOfDrawnCard,\n                    currentNumber: 252,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            else if(drawCard === 'W') {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                //ask for new color\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\n                !isSoundMuted && playWildCardSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    turn: 'Player 2',\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    currentColor: newColor,\n                    currentNumber: 300,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            else if(drawCard === 'D4W') {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                //ask for new color\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\n                //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n                //make a copy of drawCardPile array\n                const copiedDrawCardPileArray = [...drawCardPile]\n                //pull out last four elements from it\n                const drawCard1 = copiedDrawCardPileArray.pop()\n                const drawCard2 = copiedDrawCardPileArray.pop()\n                const drawCard3 = copiedDrawCardPileArray.pop()\n                const drawCard4 = copiedDrawCardPileArray.pop()\n                !isSoundMuted && playDraw4CardSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\n                    currentColor: newColor,\n                    currentNumber: 600,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            //if not action card - check if drawn card is playable\n            else if(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor) {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                !isSoundMuted && playShufflingSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    turn: 'Player 2',\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    currentColor: colorOfDrawnCard,\n                    currentNumber: numberOfDrawnCard,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            //else add the drawn card to player1's deck\n            else {\n                !isSoundMuted && playShufflingSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    turn: 'Player 2',\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard, ...player1Deck.slice(player1Deck.length)],\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n        }\n        else {\n            //remove 1 new card from drawCardPile and add it to player2's deck (immutably)\n            //make a copy of drawCardPile array\n            const copiedDrawCardPileArray = [...drawCardPile]\n            //pull out last element from it\n            const drawCard = copiedDrawCardPileArray.pop()\n            //extract number and color of drawn card\n            const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1)\n            let numberOfDrawnCard = drawCard.charAt(0)\n            if(colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                !isSoundMuted && playShufflingSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    currentColor: colorOfDrawnCard,\n                    currentNumber: 404,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n                //make a copy of drawCardPile array\n                const copiedDrawCardPileArray = [...drawCardPile]\n                //pull out last two elements from it\n                const drawCard1 = copiedDrawCardPileArray.pop()\n                const drawCard2 = copiedDrawCardPileArray.pop()\n                !isSoundMuted && playDraw2CardSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n                    currentColor: colorOfDrawnCard,\n                    currentNumber: 252,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            else if(drawCard === 'W') {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                //ask for new color\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\n                !isSoundMuted && playWildCardSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    turn: 'Player 1',\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    currentColor: newColor,\n                    currentNumber: 300,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            else if(drawCard === 'D4W') {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                //ask for new color\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\n                //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n                //make a copy of drawCardPile array\n                const copiedDrawCardPileArray = [...drawCardPile]\n                //pull out last four elements from it\n                const drawCard1 = copiedDrawCardPileArray.pop()\n                const drawCard2 = copiedDrawCardPileArray.pop()\n                const drawCard3 = copiedDrawCardPileArray.pop()\n                const drawCard4 = copiedDrawCardPileArray.pop()\n                !isSoundMuted && playDraw4CardSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\n                    currentColor: newColor,\n                    currentNumber: 600,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            //if not action card - check if drawn card is playable\n            else if(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor) {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                !isSoundMuted && playShufflingSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    turn: 'Player 1',\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    currentColor: colorOfDrawnCard,\n                    currentNumber: numberOfDrawnCard,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            //else add the drawn card to player2's deck\n            else {\n                !isSoundMuted && playShufflingSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    turn: 'Player 1',\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard, ...player2Deck.slice(player2Deck.length)],\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n        }\n    }\n    \n    return (\n        <div className={`Game backgroundColorR backgroundColor${currentColor}`}>\n            {(!roomFull) ? <>\n\n                <div className='topInfo'>\n                    <img src={require('../assets/logo.png').default} />\n                    <h1>Game Code: {room}</h1>\n                    <span>\n                        <button className='game-button green' onClick={() => setSoundMuted(!isSoundMuted)}>{isSoundMuted ? <span className=\"material-icons\">volume_off</span> : <span className=\"material-icons\">volume_up</span>}</button>\n                        <button className='game-button green' onClick={() => {\n                            if(isMusicMuted)\n                                playBBgMusic()\n                            else\n                                pause()\n                            setMusicMuted(!isMusicMuted)\n                        }}>{isMusicMuted ? <span className=\"material-icons\">music_off</span> : <span className=\"material-icons\">music_note</span>}</button>\n                    </span>\n                </div>\n\n                {/* PLAYER LEFT MESSAGES */}\n                {users.length===1 && currentUser === 'Player 2' && <h1 className='topInfoText'>Player 1 has left the game.</h1> }\n                {users.length===1 && currentUser === 'Player 1' && <h1 className='topInfoText'>Waiting for Player 2 to join the game.</h1> }\n\n                {users.length===2 && <>\n\n                    {gameOver ? <div>{winner !== '' && <><h1>GAME OVER</h1><h2>{winner} wins!</h2></>}</div> :\n                    <div>\n                        {/* PLAYER 1 VIEW */}\n                        {currentUser === 'Player 1' && <>    \n                        <div className='player2Deck' style={{pointerEvents: 'none'}}>\n                            <p className='playerDeckText'>Player 2</p>\n                            {player2Deck.map((item, i) => (\n                                <img\n                                    key={i}\n                                    className='Card'\n                                    onClick={() => onCardPlayedHandler(item)}\n                                    src={require(`../assets/card-back.png`).default}\n                                    />\n                            ))}\n                            {turn==='Player 2' && <Spinner />}\n                        </div>\n                        <br />\n                        <div className='middleInfo' style={turn === 'Player 2' ? {pointerEvents: 'none'} : null}>\n                            <button className='game-button' disabled={turn !== 'Player 1'} onClick={onCardDrawnHandler}>DRAW CARD</button>\n                            {playedCardsPile && playedCardsPile.length>0 &&\n                            <img\n                                className='Card'\n                                src={require(`../assets/cards-front/${playedCardsPile[playedCardsPile.length-1]}.png`).default}\n                                /> }\n                            <button className='game-button orange' disabled={player1Deck.length !== 2} onClick={() => {\n                                setUnoButtonPressed(!isUnoButtonPressed)\n                                playUnoSound()\n                            }}>UNO</button>\n                        </div>\n                        <br />\n                        <div className='player1Deck' style={turn === 'Player 1' ? null : {pointerEvents: 'none'}}>\n                            <p className='playerDeckText'>Player 1</p>\n                            {player1Deck.map((item, i) => (\n                                <img\n                                    key={i}\n                                    className='Card'\n                                    onClick={() => onCardPlayedHandler(item)}\n                                    src={require(`../assets/cards-front/${item}.png`).default}\n                                    />\n                            ))}\n                        </div>\n\n                        <div className=\"chatBoxWrapper\">\n                            <div className=\"chat-box chat-box-player1\">\n                                <div className=\"chat-head\">\n                                    <h2>Chat Box</h2>\n                                    {!isChatBoxHidden ?\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_down</span> :\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_up</span>}\n                                </div>\n                                <div className=\"chat-body\">\n                                    <div className=\"msg-insert\">\n                                        {messages.map(msg => {\n                                            if(msg.user === 'Player 2')\n                                                return <div className=\"msg-receive\">{msg.text}</div>\n                                            if(msg.user === 'Player 1')\n                                                return <div className=\"msg-send\">{msg.text}</div>\n                                        })}\n                                    </div>\n                                    <div className=\"chat-text\">\n                                        <input type='text' placeholder='Type a message...' value={message} onChange={event => setMessage(event.target.value)} onKeyPress={event => event.key==='Enter' && sendMessage(event)} />\n                                    </div>\n                                </div>\n                            </div>\n                        </div> </> }\n\n                        {/* PLAYER 2 VIEW */}\n                        {currentUser === 'Player 2' && <>\n                        <div className='player1Deck' style={{pointerEvents: 'none'}}>\n                            <p className='playerDeckText'>Player 1</p>\n                            {player1Deck.map((item, i) => (\n                                <img\n                                    key={i}\n                                    className='Card'\n                                    onClick={() => onCardPlayedHandler(item)}\n                                    src={require(`../assets/card-back.png`).default}\n                                    />\n                            ))}\n                            {turn==='Player 1' && <Spinner />}\n                        </div>\n                        <br />\n                        <div className='middleInfo' style={turn === 'Player 1' ? {pointerEvents: 'none'} : null}>\n                            <button className='game-button' disabled={turn !== 'Player 2'} onClick={onCardDrawnHandler}>DRAW CARD</button>\n                            {playedCardsPile && playedCardsPile.length>0 &&\n                            <img\n                                className='Card'\n                                src={require(`../assets/cards-front/${playedCardsPile[playedCardsPile.length-1]}.png`).default}\n                                /> }\n                            <button className='game-button orange' disabled={player2Deck.length !== 2} onClick={() => {\n                                setUnoButtonPressed(!isUnoButtonPressed)\n                                playUnoSound()\n                            }}>UNO</button>\n                        </div>\n                        <br />\n                        <div className='player2Deck' style={turn === 'Player 1' ? {pointerEvents: 'none'} : null}>\n                            <p className='playerDeckText'>Player 2</p>\n                            {player2Deck.map((item, i) => (\n                                <img\n                                    key={i}\n                                    className='Card'\n                                    onClick={() => onCardPlayedHandler(item)}\n                                    src={require(`../assets/cards-front/${item}.png`).default}\n                                    />\n                            ))}\n                        </div>\n\n                        <div className=\"chatBoxWrapper\">\n                            <div className=\"chat-box chat-box-player2\">\n                                <div className=\"chat-head\">\n                                    <h2>Chat Box</h2>\n                                    {!isChatBoxHidden ?\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_down</span> :\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_up</span>}\n                                </div>\n                                <div className=\"chat-body\">\n                                    <div className=\"msg-insert\">\n                                        {messages.map(msg => {\n                                            if(msg.user === 'Player 1')\n                                                return <div className=\"msg-receive\">{msg.text}</div>\n                                            if(msg.user === 'Player 2')\n                                                return <div className=\"msg-send\">{msg.text}</div>\n                                        })}\n                                    </div>\n                                    <div className=\"chat-text\">\n                                        <input type='text' placeholder='Type a message...' value={message} onChange={event => setMessage(event.target.value)} onKeyPress={event => event.key==='Enter' && sendMessage(event)} />\n                                    </div>\n                                </div>\n                            </div>\n                        </div> </> }\n                    </div> }\n                </> }\n            </> : <h1>Room full</h1> }\n\n            <br />\n            <a href='/'><button className=\"game-button red\">QUIT</button></a>\n        </div>\n    )\n}\n\nexport default Game"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}